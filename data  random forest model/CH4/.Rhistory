#调用R包
library(ggplot2) #绘图
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages(tidyverse)
install.packages("randomForest")
install.packages("rfPermute")
install.packages("openxlsx")
install.packages("tidyverse")
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
install.packages("installr")
library(installr)
update()
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 2000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 2000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 20000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
importance(df.rf, decreasing = F)
#检验每个变量的重要性并构建数据框
set.seed(123)
richness.rfP<- rfPermute(richness ~ ., data = df,
ntree = 1000,
nrep = 299,
num.cores = 2)#数据过多可以加大这个数字，多线程运行
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
importance(df.rf, decreasing = F)
#检验每个变量的重要性并构建数据框
set.seed(123)
richness.rfP<- rfPermute(richness ~ ., data = df,
ntree = 1000,
nrep = 299,
num.cores = 10)#数据过多可以加大这个数字，多线程运行
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
importance(df.rf, decreasing = F)
#检验每个变量的重要性并构建数据框
set.seed(123)
richness.rfP<- rfPermute(richness ~ ., data = df,
ntree = 1000,
nrep = 299,
num.cores = 10)#数据过多可以加大这个数字，多线程运行
importance(richness.rfP, decreasing = F)
richness.data <- data.frame(importance(richness.rfP, decreasing = F))
#%IncMSE和IncNodePurity都可以表示变量的重要性，选择哪个取决于你
#添加p值
richness.data <- mutate(richness.data,
label = ifelse(X.IncMSE.pval < 0.001, '***',
ifelse(X.IncMSE.pval < 0.01, '**',
ifelse(X.IncMSE.pval < 0.05, '*', ''))))
#添加变量名
richness.data$name <- rownames(richness.data)
#变量名排序
richness.data$name <- factor(richness.data$name,
levels = richness.data$name)
p <- ggplot(richness.data, aes(name, X.IncMSE)) +
geom_bar(aes(fill = label),
stat = 'identity') +
scale_fill_manual(values = brewer.pal(6,"Accent")) +
geom_text(aes(y = X.IncMSE + 0.5,
label = label)) +
theme_classic() +
labs(x = '',
y = 'Increase in MSE(%)') +
theme(legend.position = '') +
coord_flip() #坐标轴翻转
p
#调用R包
library(ggplot2) #绘图
library(RColorBrewer) #调色板
library(tidyverse) #mutate函数
library(randomForest) #传统随机森林
library(rfPermute) #新型随机森林
library(openxlsx)
#读取数据
df <- read.xlsx('stat.xlsx')
#构建模型
set.seed(123)
df.rf <- randomForest(richness ~ .,
data= df,
ntree = 1000,
importance=TRUE, proximity=TRUE)#一般都选择T
importance(df.rf, decreasing = F)
#检验每个变量的重要性并构建数据框
set.seed(123)
richness.rfP<- rfPermute(richness ~ ., data = df,
ntree = 1000,
nrep = 299,
num.cores = 2)#数据过多可以加大这个数字，多线程运行
importance(richness.rfP, decreasing = F)
richness.data <- data.frame(importance(richness.rfP, decreasing = F))
#%IncMSE和IncNodePurity都可以表示变量的重要性，选择哪个取决于你
#添加p值
richness.data <- mutate(richness.data,
label = ifelse(X.IncMSE.pval < 0.001, '***',
ifelse(X.IncMSE.pval < 0.01, '**',
ifelse(X.IncMSE.pval < 0.05, '*', ''))))
#添加变量名
richness.data$name <- rownames(richness.data)
#变量名排序
richness.data$name <- factor(richness.data$name,
levels = richness.data$name)
p <- ggplot(richness.data, aes(name, X.IncMSE)) +
geom_bar(aes(fill = label),
stat = 'identity') +
scale_fill_manual(values = brewer.pal(6,"Accent")) +
geom_text(aes(y = X.IncMSE + 0.5,
label = label)) +
theme_classic() +
labs(x = '',
y = 'Increase in MSE(%)') +
theme(legend.position = '') +
coord_flip() #坐标轴翻转
p
